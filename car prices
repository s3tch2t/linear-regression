import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math

# Load the dataset
url = "https://raw.githubusercontent.com/s3tch2t/linear-regression/main/CarPrice_Assignment.csv"
data = pd.read_csv(url)

# Extracting the relevant features and target
X = data[['horsepower']]
y = data['price']

# Normalize the features (mean normalization)
X = (X - X.mean()) / X.std()

# Hyperparameters
learning_rate = 0.01
num_epochs = 1000

# Initialize the weights and bias
w = 0
b = 0

# Lists to store the loss and epoch values
losses = []

# Training the linear regression model
for epoch in range(num_epochs):
    # Predict the values
    y_pred = w * X + b
    
    # Calculate the mean squared error loss
    loss = np.mean((y_pred - y) ** 2)
    losses.append(loss)
    
    # Compute the gradients
    dw = (1/len(X)) * np.sum((y_pred - y) * X)
    db = (1/len(X)) * np.sum(y_pred - y)
    
    # Update the weights and bias
    w -= learning_rate * dw
    b -= learning_rate * db

# Plot the loss vs. epoch graph
plt.figure(figsize=(10, 6))
plt.plot(range(num_epochs), losses)
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Loss vs. Epoch')
plt.show()

# Print the final weight and bias
print("Final weight (w):", w)
print("Final bias (b):", b)
